---

# geerlingguy.pip
pip_install_packages:
  - name: docker
  - name: docker-compose

# geerlingguy.docker
docker_install_compose: true
docker_compose_version: "1.26.0"
docker_compose_arch: "{{ ansible_architecture }}"
docker_compose_path: /usr/local/bin/docker-compose

# caddy_ansible.caddy_ansible
caddy_config: |
  {{ authentik_domain }} {
    reverse_proxy localhost:9000

    header {
      Strict-Transport-Security max-age=15552000
    }

    tls logs@moras.dev {
      dns cloudflare {{ cloudflare_dns_token }}
    }
  }
caddy_update: true
caddy_packages: [
  "github.com/caddy-dns/cloudflare"
]
caddy_setcap: true
caddy_systemd_capabilities_enabled: true
caddy_systemd_capabilities: "CAP_NET_BIND_SERVICE"

# docker-compose file
docker_compose:
  version: '3.4'

  services:
    postgresql:
      image: docker.io/library/postgres:12
      restart: unless-stopped
      healthcheck:
        test: ["CMD-SHELL", "pg_isready -d authentik -U authentik"]
        start_period: 20s
        interval: 30s
        retries: 5
        timeout: 5s
      volumes:
        - "{{ authentik_storage_location }}/database:/var/lib/postgresql/data"
      environment:
        - "POSTGRES_PASSWORD={{ authentik_db_pass }}"
        - POSTGRES_USER=authentik
        - POSTGRES_DB=authentik

    redis:
      image: docker.io/library/redis
      command: --save 60 1 --loglevel warning
      restart: unless-stopped
      healthcheck:
        test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
        start_period: 20s
        interval: 30s
        retries: 5
        timeout: 3s
      volumes:
        - "{{ authentik_storage_location }}/redis:/data"

    server:
      image: ghcr.io/goauthentik/server:latest
      restart: unless-stopped
      command: server
      environment:
        - AUTHENTIK_REDIS__HOST=redis
        - AUTHENTIK_POSTGRESQL__HOST=postgresql
        - AUTHENTIK_POSTGRESQL__USER=authentik
        - AUTHENTIK_POSTGRESQL__NAME=authentik
        - "AUTHENTIK_POSTGRESQL__PASSWORD={{ authentik_db_pass }}"
        - "AUTHENTIK_SECRET_KEY={{ authentik_secret_key }}"
        - AUTHENTIK_ERROR_REPORTING__ENABLED=true
        - "AUTHENTIK_EMAIL__HOST={{ smtp_server }}"
        - "AUTHENTIK_EMAIL__PORT={{ smtp_port }}"
        - "AUTHENTIK_EMAIL__USERNAME={{ smtp_user }}"
        - "AUTHENTIK_EMAIL__PASSWORD={{ smtp_pass }}"
        - "AUTHENTIK_EMAIL__USE_TLS={{ smtp_tls }}"
        - "AUTHENTIK_EMAIL__USE_SSL={{ smtp_ssl }}"
        - AUTHENTIK_EMAIL__TIMEOUT=10
        - "AUTHENTIK_EMAIL__FROM={{ smtp_from }}"
      volumes:
        - "{{ authentik_storage_location }}/media:/media"
        - "{{ authentik_storage_location }}/custom-templates:/templates"
      ports:
        - "9000:9000"
        - "9443:9443"

    worker:
      image: ghcr.io/goauthentik/server:latest
      restart: unless-stopped
      command: worker
      environment:
        - AUTHENTIK_REDIS__HOST=redis
        - AUTHENTIK_POSTGRESQL__HOST=postgresql
        - AUTHENTIK_POSTGRESQL__USER=authentik
        - AUTHENTIK_POSTGRESQL__NAME=authentik
        - "AUTHENTIK_POSTGRESQL__PASSWORD={{ authentik_db_pass }}"
        - "AUTHENTIK_SECRET_KEY={{ authentik_secret_key }}"
        - AUTHENTIK_ERROR_REPORTING__ENABLED=true
        - "AUTHENTIK_EMAIL__HOST={{ smtp_server }}"
        - "AUTHENTIK_EMAIL__PORT={{ smtp_port }}"
        - "AUTHENTIK_EMAIL__USERNAME={{ smtp_user }}"
        - "AUTHENTIK_EMAIL__PASSWORD={{ smtp_pass }}"
        - "AUTHENTIK_EMAIL__USE_TLS={{ smtp_tls }}"
        - "AUTHENTIK_EMAIL__USE_SSL={{ smtp_ssl }}"
        - AUTHENTIK_EMAIL__TIMEOUT=10
        - "AUTHENTIK_EMAIL__FROM={{ smtp_from }}"
      user: root
      volumes:
        - /var/run/docker.sock:/var/run/docker.sock
        - "{{ authentik_storage_location }}/media:/media"
        - "{{ authentik_storage_location }}/certs:/certs"
        - "{{ authentik_storage_location }}/custom-templates:/templates"
